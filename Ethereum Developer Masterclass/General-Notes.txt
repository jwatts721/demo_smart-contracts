https://www.udemy.com/course/ethereum-developer-masterclass/learn/lecture/21955740?start=15#overview

Remix IDE:
Deployment tab is the most important to understand.
Environment: 
  - JavaScript VM (for TESTING, running local test blockchain in the browser)
  - Injected Web3
  - Web3 Provider

The JavaScript VM is used for testing in a local blockchain running within the browser.
You can compile and deploy here without transaction fees.
This test blockchain comes with dummy wallet accounts in the "Accounts" dropdown.
Just like Ganache CLI, Hardhat and Truffle provide a local test blockchain.
All accounts default to 100 ETH as default. 

MetaMask:
- Web3 Based wallet
These are light nodes within the network.
Unlike full nodes which are a full copy of the Ethereum blockchain.
This allows use to run functions on the "light" node.

Types of Accounts on Ethereum:
- Unlike Bitcoin, which only has one type of account because Bitcoin is the only asset,
Ethereum has Externally Owned Accounts and Contract Accounts.
Externally Owned Accounts = accounts in our wallets, owned by users
    Has a public and a private key
Contract Accounts = Accounts for Smart Contracts
    Only has a public key, there is no private key

Types of Networks:
- Ethereum Mainnet (the main Ethereum network, fees apply)

    Local Test Network 
        - local blockchain in isolated environment - no access from the outside
        - each test account comes starts with 100 ETH 
- JavaScript Network
- Ganache
- Hardhat
- Truffle Develop

    Public Test Networks 
        - best for testing in the public space, particulary for teams of developers
        - requires obtaining ETH from test faucets
- JavaScript Network
- Rinkeby TestNet
- Kovan TestNet 
- Ropsten TestNet 
- Goerli TestNet 

NOTE: One wallet account address can be used for ALL networks. 
      You have to be careful that you DO NOT use real currency on a test network, because this currency will be lost.
      I would test with a different account than the one you use real currency.

Token Standards:
- ERC 20 
    - ERC = Ethereum Request for Comments
        - Whenever you want to set a standard, you create an E.I.P. (Ethereum Improvement Proposal).
            - Proposal is negotiated on
            - If approved, becomes an ERC standard

        20 = The number at which the EIP was introduced
            Ex: ERC20, ERC721

    - ERC20 - standard for creating fungible tokens
        https://docs.openzeppelin.com/contracts/2.x/api/token/erc20
        - Fungible - any token can be exchange for other tokens or assets. 
                   - the value of every token is the same 
        - Non-Fungible - any asset where the value is unique to that asset.

        - Definitions of general functions, etc
            - These are defined standards within ERC20 and other ERC protocols (EVM compatible protocols)
                Example Functions:
                    - transfer()
                    - send()
            - When you follow all of the predefined rules, it can become an ERC20 token. 
            - You can define rules that belong to different protocols, ex, ERC721
            - You can define new rules, that derive from ERC20. This may become a different token for a different protocol/blockchain.

            - When you create tokens, you can create any number of tokens you want, depends on the use case

    Functions:
      Note: This is not an exhaustive list. These are the functions that you should implement at minimum. 
        - tokenSupply() returns (uint256)                          - the total number of tokens that you have
        - balanceOf(address tokenOwner) returns (uint)             - how many tokens does any given address have
        - tranfer(address receiver, uint numTokens) returns (bool) - transfers from your account to another address
        - approve(address delegate, uint numTokens) returns (bool) - approves another address the ability to execute functions, gives allowance to delegate address
                                                                      ie: This can be an approval of Binance to access the account to allow purchasing of tokens which can be transferred.
                                                                            This gives flexibility for the seller to not have to be involved in every transaction.
                                                                        Delegates authority to send tokens without the approval of the owner per transaction.
                                                                        Authority is delegated to Binance to transfer tokens on your behalf.
        - allowance(address owner, address delegate) returns (uint) - How much the owner delegated/approved to the delegate (ie: Binance)
        - transferFrom (address owner, address buyer, uint numTokens) returns (bool) - Used by exchanges to send money from owner to buyer

        
            